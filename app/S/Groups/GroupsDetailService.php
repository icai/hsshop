<?php

/**
 * Created by zhangyh.
 * User: zhangyh
 * Date: 2017/3/13  14:52
 * DESC
 */
namespace App\S\Groups;
use App\Lib\Redis\GroupsDetailRedis;
use App\Lib\Redis\GroupsRedis;
use App\Lib\Redis\GroupsRuleRedis;
use App\Model\GroupsDetail;
use App\S\S;
use DB;

class GroupsDetailService extends S
{
    /**
     *
     * FileSystemService constructor.
     * @desc 构造方法
     */
    public function __construct()
    {
        parent::__construct('GroupsDetail');
    }





    /**
     * @author zhangyh
     * @Email zhangyh_private@foxmail.com
     * @date 20170626
     * @desc 根据id获取列表
     * @param $id
     * @return array
     */
    public function getRowById($id)
    {
        $result = [];
        $redis = new GroupsDetailRedis();
        $result = $redis->getRow($id);

        if (empty($result)) {
            $result = $this->model->wheres(['id' => $id])->first();
            if (!$result) {
                return [];
            }
            $result = $result->toArray();
            $redis->addArr($result);
        }
        return $result;
    }

    public function getListById(array $idArr)
    {
        $result = [];
        $redisData = $mysqlData = [];
        $redisId = [];
        $idArr = array_values($idArr);
        $redis = new GroupsDetailRedis();
        $result = $redis->getArr($idArr);
        foreach ($idArr as $key => $value) {
            if (empty($result[$key]))
                $redisId[] = $value;
            else
                $redisData[$value] = $result[$key];
        }
        if (!empty($redisId)) {
            $mysqlData = $this->model->whereIn('id',$redisId)->get()->toArray();
            $mysqlData = array_column($mysqlData, null,'id');
            $redis->setArr($mysqlData);
        }
        return sortArr($idArr, ($redisData + $mysqlData) );
    }

    /**
     * @author zhangyh
     * @Email zhangyh_private@foxmail.com
     * @date 20170626
     * @desc 根据id更新数据
     * @param $id
     * @param $data
     */
    public function update($id,$data){
        $res = $this->model->where('id',$id)->update($data);
        if ($res){
            $storeRedis = new GroupsDetailRedis();
            return $storeRedis->update($id,$data);
        }
    }


    /**
     *
     * @param $ids
     * @param $data
     * @return bool
     * @author 张永辉 2018年9月18日
     */
    public function batchUpdate($ids,$data)
    {
        $res = $this->model->whereIn('id',$ids)->update($data);
        if ($res){
            $redis = new GroupsDetailRedis();
            $redisUpData = [];
            foreach ($ids as $val){
                $redisUpData[] = array_merge($data,['id'=>$val]);
            }
            return $redis->updateArr($redisUpData);
        }else{
            return false;
        }
    }


    public function del($id)
    {
        $res = $this->model->where('id',$id)->delete();
        if ($res){
            $storeRedis = new GroupsDetailRedis();
            return $storeRedis->del($id);
        }else{
            return false;
        }
    }

    public function add($data)
    {
        return $this->model->insertGetId($data);
    }

    public function getlistPage($where,$orderBy = '', $order = '')
    {
        return $this->getListWithPage($where, $orderBy, $order);
    }

    public  function getListByWhere($where, $skip = "", $perPage = "", $orderBy = "", $order = "")
    {
        return $this->getList($where, $skip, $perPage, $orderBy, $order);
    }

    public function count($where = [])
    {
        return parent::count($where); // TODO: Change the autogenerated stub
    }

    /**
     * @author zhangyh
     * @Email zhangyh_private@foxmail.com
     * @date 20170714
     * @desc 根据
     * @param $mid
     */
    public function notCompleteOrderNum($mid)
    {
        $sql = 'SELECT COUNT(gd.id) as num FROM ds_groups_detail as gd LEFT JOIN ds_groups as g ON gd.groups_id=g.id WHERE gd.member_id='.$mid.' AND g.`status`=1';
        list($res) = DB::select($sql);
        return $res->num;
    }


    /**
     * @author zhangyh
     * @Email zhangyh_private@foxmail.com
     * @date 20170714
     * @desc 根据
     * @param $mid
     */
    public function getOrder($mid)
    {
        $sql = 'SELECT gd.id,gd.member_id,gd.oid  FROM ds_groups_detail as gd LEFT JOIN ds_groups as g ON gd.groups_id=g.id WHERE gd.member_id='.$mid.' AND g.`status`=1 AND gd.deleted_at IS NULL ';
        $res = DB::select($sql);
        $oids = [];
        foreach ($res as $val){
            $oids[] = $val->oid;
        }
        return $oids;
    }

    /**
     * @author zhangyh
     * @Email zhangyh_private@foxmail.com
     * @date 商家后台获取为成团订单
     * @desc
     * @return array
     */
    public function getByWid()
    {
        $page = $_REQUEST['page']??1;
        $offset = ($page-1)*config('database.perPage');
        $sql = 'SELECT gd.*,g.status FROM ds_groups_detail as gd LEFT JOIN ds_groups  as g ON gd.groups_id=g.id WHERE g.wid='.session('wid').' AND g.`status`=1  AND gd.deleted_at IS NULL LIMIT '.config('database.perPage').' OFFSET '.$offset;
        $res = DB::select($sql);
        $groups = [];
        foreach ($res as $val){
            $temp = [];
            $temp['id'] = $val->id;
            $temp['groups_id'] = $val->groups_id;
            $temp['oid'] = $val->oid;
            $temp['member_id'] = $val->member_id;
            $temp['is_head'] = $val->is_head;
            $temp['status'] = $val->status;
            $groups[$temp['oid']] = $temp;
        }
        return $groups;
    }

    /**
     * @author zhangyh
     * @Email zhangyh_private@foxmail.com
     * @date 20170718
     * @desc
     * @param $oids
     * @return array
     */
    public function getListByOrderIds($oids)
    {
        $oids = implode(',',$oids);
        $sql = 'SELECT gd.*,g.status FROM ds_groups_detail as gd LEFT JOIN ds_groups  as g ON gd.groups_id=g.id WHERE gd.oid IN('.$oids.')  AND gd.deleted_at IS NULL';
        $res = DB::select($sql);
        $groups = [];
        foreach ($res as $val){
            $temp = [];
            $temp['id'] = $val->id;
            $temp['groups_id'] = $val->groups_id;
            $temp['oid'] = $val->oid;
            $temp['member_id'] = $val->member_id;
            $temp['is_head'] = $val->is_head;
            $temp['status'] = $val->status;
            $groups[$temp['oid']] = $temp;
        }
        return $groups;
    }


    /**
     * @author zhangyh
     * @Email zhangyh_private@foxmail.com
     * @date 20170721
     * @desc 判断用户是否参加某团
     * @param $mid
     * @param $groups_id
     * @return bool
     */
    public function isExist($mid,$groups_id)
    {
        $res = $this->model->where('groups_id',$groups_id)->where('member_id',$mid)->get(['id'])->toArray();
        if ($res){
            return true;
        }else{
            return false;
        }
    }

    public function myGroups($mid,$status='')
    {
        $page = app('request')->input('page')??1;
        $pagesize = config('database.perPage');
        $offset = ($page-1)*$pagesize;
        $sql = 'SELECT g.id,gd.member_id,gd.oid,g.rule_id,gd.is_head,g.identifier,g.status,g.num FROM ds_groups_detail as gd LEFT JOIN ds_groups as g ON gd.groups_id = g.id WHERE gd.member_id='.$mid;
        if ($status){
            $sql = $sql.' AND g.`status`= '.$status;
        }
        $sql = $sql.' ORDER BY gd.id DESC  LIMIT '.$pagesize.' OFFSET '.$offset;
        $res = DB::select($sql);
        $result = [];
        foreach ($res as $val){
            $result[] = json_decode(json_encode($val),true);
        }
        return $result;
    }


    public function getGroups($gids)
    {
        if (!$gids){
            return [];
        }
        $sql = 'SELECT gd.id,gd.groups_id,gd.is_head,m.headimgurl,m.nickname,gd.created_at FROM ds_groups_detail as gd LEFT JOIN ds_member as m ON gd.member_id=m.id WHERE gd.groups_id IN('.implode(',',$gids).')';
        $res = DB::select($sql);
        $result  = json_decode(json_encode($res),true);
        return $result;
    }


    public function getGroupsMessage($wid)
    {
        $sql = 'SELECT gd.*,g.wid,g.`status` FROM ds_groups_detail as gd LEFT JOIN ds_groups as g ON gd.groups_id=g.id WHERE g.`status` in (1,2) AND gd.deleted_at IS NULL AND g.wid='.$wid.' ORDER BY gd.id DESC  LIMIT 0,30';
        $res = DB::select($sql);
        $result  = json_decode(json_encode($res),true);
        shuffle($result);
        return $result;
    }


    /**
     * 通过gi获取两个人的 id
     * @param $ids
     * @return array
     * @author 张永辉
     */
    public function getMidByGid($ids){
       $res = $this->model->whereIn('groups_id',$ids)->take(2)->get(['id','member_id'])->toArray();
       if ($res){
           return array_column($res,'member_id');
       }else{
           return [];
       }
    }


}























