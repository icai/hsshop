<?php
/**
 * Created by PhpStorm.
 * Author: MeiJay
 * Date: 2018/1/24
 * Time: 10:06
 */

namespace App\S\ShareEvent;


use App\S\S;

class LiEventRecordService extends S
{
    public function __construct($modelName = null)
    {
        parent::__construct('LiEventRecord');
    }


    private function __return($err_code = 0, $msg = 'success',$data = [])
    {
        $return = [
            'msg'       => $msg,
            'err_code'  => $err_code,
            'data'      => $data
        ];
        return  $return;
    }

    //创建记录
    public function createShareEventRecord($data)
    {
        $data['ip'] = getIP();
        $obj = $this->model->create($data);
        if(!$obj)
        {
            return $this->__return(1,'数据库添加失败');
        }
        return $this->__return();
    }


    public function count($where = [])
    {
        return $this->model->where($where)->count();
    }


    public function getListWithPage($where = [], $orderBy = '', $order = '', $pageSize = 0)
    {
        return parent::getListWithPage($where, $orderBy, $order, $pageSize); // TODO: Change the autogenerated stub
    }


    public function getList($where = [], $skip = "", $perPage = "", $orderBy = "", $order = "")
    {
        return parent::getList($where, $skip, $perPage, $orderBy, $order); // TODO: Change the autogenerated stub
    }


    public function getListById(array $idArr)
    {
        $idArr = array_values($idArr);
        $mysqlData = $this->model->whereIn('id',$idArr)->get()->toArray();
        $mysqlData = array_column($mysqlData, null,'id');
        return sortArr($idArr,$mysqlData);
    }


    public function update($where)
    {
        $flag = $this->model->where($where)->update(['current_status' => 1]);
        if($flag == false){
            $this->__return(1,'数据库更新失败');
        }
        return $this->__return();
    }


    /**
     * 获取助减用户列表（并根据ip进行排序）
     * @author wuxiaoping <2017.12.28>
     * @param  [array] $data [条件数组数据]
     * @return [array]       [description]
     */
    public function getAllListSort($data,$page=1)
    {
        $where = $data;
        $pageSize = 8;  //每页显示8条数据
        $start = ($page-1)*$pageSize;
        //先进行分组排序
        $data = $this->model->select(DB::raw('count(ip) as number,ip'))->where($data)->groupBy('ip')->orderBy('number','DESC')->get()->toArray();
        $returnData = $list = [];
        $numMax = 0;
        //对已排完序的数据进行二次处理
        if ($data) {
            $numMax = $data[0]['number'];
            foreach ($data as $key => $value) {
                $where['ip'] = $value['ip'];
                $result[$value['ip']] = $this->model->wheres($where)->orderBy('created_at','DESC')->get()->toArray();
            }
            $list = [];
            if ($result) {
                foreach ($result as $key => $items) {
                    foreach ($items as $k => $item) {
                        array_push($list, $item);
                    }
                }
            }
        }
        $returnData['status'] = 1;
        $returnData['count']  = count($list);
        $returnData['numMax'] = $numMax;
        $returnData['list']   = array_slice($list,$start,$pageSize);

        return $returnData;
    }

    /**
     * todo 查询用户的红包金额
     * @param array $where
     * @return array
     * @author jonzhang
     * @date 2018-01-15
     */
    public function statRedPacket($where=[])
    {
        $returnData=['errCode'=>0,'errMsg'=>'','data'=>0.00];
        if(empty($where))
        {
            $returnData['errCode'] = -1;
            $returnData['errMsg'] = '查询数据为空';
            return $returnData;
        }
        $redPackMoney = $this->model->where($where)->where('red_packet_id','>',0)->sum('red_packet_money');
        if($redPackMoney===false)
        {
            $returnData['errCode'] = -2;
            $returnData['errMsg'] = '查询数据出现问题';
            return $returnData;
        }
        $returnData['data']=$redPackMoney;
        return $returnData;
    }



}