<?php

/**
 * Created by zhangyh.
 * User: zhangyh
 * Date: 2017/3/13  14:52
 * DESC
 */
namespace App\S\Member;
use App\Lib\Redis\UnifiedMemberRedis;
use App\S\S;
use Hash;
use StaffOperLogService;

class UnifiedMemberService extends S
{

    public $redis;
    /**
     *
     * FileSystemService constructor.
     * @desc 构造方法
     */
    public function __construct()
    {
        parent::__construct('UnifiedMember');
        $this->redis = new UnifiedMemberRedis();
    }






    /**
     * @author zhangyh
     * @Email zhangyh_private@foxmail.com
     * @date 20170626
     * @desc 根据id获取列表
     * @param $id
     * @return array
     */
    public function getRowById($id)
    {
        $result = [];
        $result = $this->redis->getRow($id);

        if (empty($result)) {
            $result = $this->model->wheres(['id' => $id])->first();
            if (!$result) {
                return [];
            }
            $result = $result->toArray();
            $this->redis->addArr($result);
        }
        return $result;
    }

    public function getListById(array $idArr)
    {
        $result = [];
        $redisData = $mysqlData = [];
        $redisId = [];
        $idArr = array_values($idArr);
        $result = $this->redis->getArr($idArr);
        foreach ($idArr as $key => $value) {
            if (empty($result[$key]))
                $redisId[] = $value;
            else
                $redisData[$value] = $result[$key];
        }
        if (!empty($redisId)) {
            $mysqlData = $this->model->whereIn('id',$redisId)->get()->toArray();
            $mysqlData = array_column($mysqlData, null,'id');
            $this->redis->setArr($mysqlData);
        }
        return sortArr($idArr, ($redisData + $mysqlData) );
    }

    /**
     * @author zhangyh
     * @Email zhangyh_private@foxmail.com
     * @date 20170626
     * @desc 根据id更新数据
     * @param $id
     * @param $data
     */
    public function update($id,$data){
        $res = $this->model->where('id',$id)->update($data);
        if ($res){
            $storeRedis = new UnifiedMemberRedis();
            return $storeRedis->update($id,$data);
        }
    }

    public function del($id)
    {
        $res = $this->model->where('id',$id)->delete();
        if ($res){
            $storeRedis = new UnifiedMemberRedis();
            return $storeRedis->del($id);
        }else{
            return false;
        }
    }

    public function add($data)
    {
        return $this->model->insertGetId($data);
    }

    public function getlistPage($where = [])
    {
        return $this->getListWithPage($where, '', '');
    }

    public function getRowByOpenid($openId)
    {
        $redis = new UnifiedMemberRedis('openid');
        $id = $redis->getIdByOpenid($openId);

        if (empty($id)) {
            $result = $this->model->wheres(['openid' => $openId])->first();
            if (!$result) {
                return [];
            }
            $result = $result->toArray();
            $id = $result['id'];
            $redis->setIdByOpenid($openId, $id);
        }
        return $this->getRowById($id);
    }


    public function getList($where = [], $skip = "", $perPage = "", $orderBy = "", $order = "")
    {
        return parent::getList($where, $skip, $perPage, $orderBy, $order); // TODO: Change the autogenerated stub
    }


    public function getRowByMobile($mobile)
    {
        $res = $this->getList(['mobile'=>$mobile]);
        if ($res){
            return $res[0];
        }else{
            return [];
        }
    }


    /**
     * @author zhangyh
     * @Email zhangyh_private@foxmail.com
     * @date 20171219
     * @desc 获取条件
     */
    public function getWhere($input=[])
    {
        $where = [];
        foreach ($input as $key=>$value){
            if (empty($value)){
                continue;
            }
            switch ($key){
                case 'truename' :
                    $where['truename'] = $value;
                    break;
                case 'nickname' :
                    $where['nickname'] = $value;
                    break;
                case 'mobile' :
                    $where['mobile'] = $value;
                    break;
            }
        }

        return $where;
    }


}























